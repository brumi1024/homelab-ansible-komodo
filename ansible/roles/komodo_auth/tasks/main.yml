---
# WARNING: POTENTIAL SILENT FAILURE SCENARIO
# ========================================
# This check prevents recreating API keys if they exist in 1Password.
# However, on FRESH deployments, if stale API keys exist in 1Password from
# a previous deployment, this will skip API key creation in the NEW Komodo instance,
# causing silent failures in subsequent playbooks.
#
# SOLUTION: Before fresh deployments, ensure the "Komodo" item in 1Password
# either doesn't exist or has the komodo_api_key field removed:
#   op item delete "Komodo" --vault "Homelab Ansible"
# OR
#   op item edit "Komodo" --vault "Homelab Ansible" komodo_api_key=""

- name: Check if API keys already exist in 1Password
  ansible.builtin.shell: op item get "Komodo" --vault "Homelab" --fields komodo_api_key 2>/dev/null || echo ""
  register: komodo_auth_existing_api_key
  failed_when: false
  changed_when: false
  no_log: true

- name: Show API key recreation notice when forcing recreation
  ansible.builtin.debug:
    msg:
      - "üîÑ Force recreation enabled - will recreate API keys even though they exist in 1Password"
      - "‚ö†Ô∏è  This will overwrite existing API keys!"
  when:
    - komodo_auth_existing_api_key.stdout != ""
    - komodo_auth_force_recreate | default(false) | bool

- name: Skip authentication setup if API keys already exist (unless force recreate)
  ansible.builtin.meta: end_play
  when:
    - komodo_auth_existing_api_key.stdout != ""
    - not (komodo_auth_force_recreate | default(false) | bool)

- name: Wait for Komodo Core to be ready
  ansible.builtin.uri:
    url: "{{ komodo_auth_base_url }}"
    method: GET
    status_code: 200
  retries: 10
  delay: 5

- name: Test if admin user already exists
  ansible.builtin.uri:
    url: "{{ komodo_auth_base_url }}/auth"
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      type: "LoginLocalUser"
      params:
        username: "{{ komodo_auth_admin_username }}"
        password: "{{ komodo_auth_admin_password }}"
    status_code: [200, 500] # 200 = success, 500 = user doesn't exist
  register: komodo_auth_login_test
  failed_when: false
  no_log: true

- name: Handle fresh deployment if admin user doesn't exist
  ansible.builtin.include_tasks: create_admin_user.yml
  when: komodo_auth_login_test.status != 200

- name: Login as admin user
  ansible.builtin.uri:
    url: "{{ komodo_auth_base_url }}/auth"
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      type: "LoginLocalUser"
      params:
        username: "{{ komodo_auth_admin_username }}"
        password: "{{ komodo_auth_admin_password }}"
    status_code: 200
  register: komodo_auth_login_response
  no_log: true

- name: Extract JWT token
  ansible.builtin.set_fact:
    komodo_auth_jwt_token: "{{ komodo_auth_login_response.json.jwt }}"
  no_log: true

- name: Create or find service user
  ansible.builtin.include_tasks: manage_service_user.yml
- name: Create API key for service user
  ansible.builtin.include_tasks: create_api_key.yml
- name: Store API credentials in 1Password
  ansible.builtin.include_tasks: store_credentials.yml
