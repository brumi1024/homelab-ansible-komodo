---
# Initialize Komodo Authentication and API Keys
# This playbook handles both fresh deployments and existing installations
# It automatically creates admin user if needed, then generates API keys

- name: Initialize Komodo Authentication
  hosts: localhost
  gather_facts: no
  vars:
    komodo_port: "{{ hostvars[groups['core'][0]]['komodo_port'] }}"
    komodo_base_url: "http://{{ hostvars[groups['core'][0]]['ansible_host'] }}:{{ komodo_port }}"
    komodo_core_path: "{{ hostvars[groups['core'][0]]['komodo_data_path'] | default('/opt/komodo') }}"
    is_fresh_deployment: false

  tasks:
    - name: Check if API keys already exist in 1Password
      shell: op item get "Komodo" --vault "Homelab" --fields komodo_api_key 2>/dev/null || echo ""
      register: existing_api_key
      changed_when: false

    - name: Skip if API keys already exist
      debug:
        msg: "API keys already exist in 1Password. Skipping creation."
      when: existing_api_key.stdout != ""

    - name: End play if API keys already exist
      meta: end_play
      when: existing_api_key.stdout != ""

    - name: Wait for Komodo Core to be ready
      uri:
        url: "{{ komodo_base_url }}"
        method: GET
        status_code: 200
      retries: 10
      delay: 5

    - name: Get admin credentials from 1Password
      set_fact:
        admin_username: "{{ lookup('community.general.onepassword', 'Komodo', field='username', vault='Homelab') }}"
        admin_password: "{{ lookup('community.general.onepassword', 'Komodo', field='password', vault='Homelab') }}"
      no_log: true

    - name: Test if admin user already exists
      uri:
        url: "{{ komodo_base_url }}/auth"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          type: "LoginLocalUser"
          params:
            username: "{{ admin_username }}"
            password: "{{ admin_password }}"
        status_code: [200, 500]  # 200 = success, 500 = user doesn't exist
      register: login_test
      failed_when: false
      no_log: true

    - name: Set fresh deployment flag if login failed
      set_fact:
        is_fresh_deployment: true
      when: login_test.status != 200

    - name: Handle fresh deployment - create admin user
      block:
        - name: Create temporary compose override to enable registration
          template:
            src: temp-compose-override.yml.j2
            dest: "{{ komodo_core_path }}/docker-compose.override.yml"
          delegate_to: "{{ groups['core'][0] }}"

        - name: Restart Komodo Core with registration enabled
          shell: cd {{ komodo_core_path }} && docker compose restart core
          delegate_to: "{{ groups['core'][0] }}"

        - name: Wait for Komodo Core to be ready after restart
          uri:
            url: "{{ komodo_base_url }}"
            method: GET
            status_code: 200
          retries: 15
          delay: 5

        - name: Create admin user
          uri:
            url: "{{ komodo_base_url }}/auth"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              type: "CreateLocalUser"
              params:
                username: "{{ admin_username }}"
                password: "{{ admin_password }}"
            status_code: [200, 201]
          register: create_user_response
          no_log: true

        - name: Remove temporary compose override
          file:
            path: "{{ komodo_core_path }}/docker-compose.override.yml"
            state: absent
          delegate_to: "{{ groups['core'][0] }}"

        - name: Restart Komodo Core to re-enable registration protection
          shell: cd {{ komodo_core_path }} && docker compose restart core
          delegate_to: "{{ groups['core'][0] }}"

        - name: Wait for Komodo Core to be ready after final restart
          uri:
            url: "{{ komodo_base_url }}"
            method: GET
            status_code: 200
          retries: 15
          delay: 5

      when: is_fresh_deployment

    - name: Login as admin user
      uri:
        url: "{{ komodo_base_url }}/auth"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          type: "LoginLocalUser"
          params:
            username: "{{ admin_username }}"
            password: "{{ admin_password }}"
        status_code: 200
      register: login_response
      no_log: true

    - name: Extract JWT token
      set_fact:
        jwt_token: "{{ login_response.json.jwt }}"
      no_log: true

    - name: Create service user for automation
      uri:
        url: "{{ komodo_base_url }}/write"
        method: POST
        headers:
          Authorization: "{{ jwt_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "CreateServiceUser"
          params:
            username: "komodo-automation"
            description: "Service user for automated deployments and API access"
        status_code: [200, 201, 409, 500]  # 409 if user already exists
      register: service_user_response

    - name: Debug service user creation result
      debug:
        msg: "Service user status: {{ 'Created' if service_user_response.status in [200, 201] else ('Already exists' if service_user_response.status in [409, 500] else 'Error: ' + service_user_response.status|string) }}"

    - name: Get service user ID from creation response
      set_fact:
        service_user_id: "{{ service_user_response.json._id['$oid'] }}"
      when: service_user_response.status in [200, 201]

    - name: Find existing service user if creation failed
      uri:
        url: "{{ komodo_base_url }}/read"
        method: POST
        headers:
          Authorization: "{{ jwt_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "FindUser"
          params:
            username: "komodo-automation"
        status_code: [200]
      register: find_user_response
      when: service_user_response.status not in [200, 201]

    - name: Get service user ID from find response
      set_fact:
        service_user_id: "{{ find_user_response.json._id['$oid'] }}"
      when: service_user_response.status not in [200, 201]

    - name: Create API key for service user
      uri:
        url: "{{ komodo_base_url }}/write"
        method: POST
        headers:
          Authorization: "{{ jwt_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "CreateApiKeyForServiceUser"
          params:
            user_id: "{{ service_user_id }}"
            name: "deployment-api-key"
            expires: 0  # Never expires
        status_code: [200, 201]
      register: api_key_response

    - name: Extract API credentials
      set_fact:
        api_key: "{{ api_key_response.json.key }}"
        api_secret: "{{ api_key_response.json.secret }}"
      no_log: true

    - name: Update API key in 1Password
      shell: op item edit "Komodo" --vault "Homelab" "komodo_api_key={{ api_key }}" < /dev/null
      no_log: true

    - name: Update API secret in 1Password
      shell: op item edit "Komodo" --vault "Homelab" "komodo_api_secret={{ api_secret }}" < /dev/null
      no_log: true

    - name: Verify API keys were stored
      shell: op item get "Komodo" --vault "Homelab" --fields komodo_api_key
      register: verify_api_key
      changed_when: false
      no_log: true

    - name: Display initialization summary
      debug:
        msg: |
          Komodo Authentication Initialization Complete!
          
          Deployment Type: {{ 'Fresh deployment (admin user created)' if is_fresh_deployment else 'Existing deployment (admin user found)' }}
          Admin User: {{ admin_username }}
          Service User: komodo-automation
          Service User Status: {{ 'Created' if service_user_response.status in [200, 201] else 'Already existed' }}
          
          API Key: Generated and stored in 1Password
          Verification: {{ 'Success' if verify_api_key.stdout != '' else 'Failed' }}
          
          Security Note: {% if is_fresh_deployment %}User registration was temporarily enabled during setup and has been re-disabled.{% else %}No security changes were made to the deployment.{% endif %}
          
          Next Steps:
          1. Deploy periphery nodes: ./scripts/deploy.sh periphery
          2. Bootstrap komodo-op variables: ./scripts/deploy.sh bootstrap-komodo-op
          3. Setup GitOps syncs: ./scripts/deploy.sh setup-syncs
          
          The manual API key creation step has been eliminated!